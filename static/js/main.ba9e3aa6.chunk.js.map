{"version":3,"sources":["components/SearchBar.js","components/Card.js","components/CardList.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["SearchBar","searchChange","type","placeholder","onChange","Card","mass","name","birth_year","className","src","alt","CardList","robots","map","user","index","key","Scroll","children","style","overflowY","height","backgroundColor","padding","ErrorBoundary","props","state","hasError","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","response","json","people","results","filteredrobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8RAiBeA,G,KAZG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,6BACI,2BACAC,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCQPI,EAfF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,WAC1B,OACE,yBAAKC,UAAU,QACb,yBACEC,IAAG,+BAA0BJ,GAA1B,OAAiCE,EAAjC,aACHG,IAAI,mBAEN,6BACE,4BAAKJ,GACL,0CAAgBC,MCQTI,EAjBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAClB,OACE,yBAAKJ,UAAU,YACZI,EAAOC,KAAI,SAACC,EAAMC,GACjB,OACE,kBAAC,EAAD,CACEC,IAAKJ,EAAOG,GAAOV,KAAKO,EAAOG,GAAOR,WACtCF,KAAMO,EAAOG,GAAOV,KACpBC,KAAMM,EAAOG,GAAOT,KACpBC,WAAYK,EAAOG,GAAOR,kBCIvBU,EAfA,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAChB,OACE,yBACEC,MAAO,CACLC,UAAW,SACXC,OAAQ,OACRC,gBAAiB,UACjBC,QAAS,UAGVL,ICWQM,E,kDApBb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,UAAU,GAHK,E,gEAQjBC,KAAKC,SAAS,CAAEF,UAAU,M,+BAI1B,OAAOC,KAAKF,MAAMC,SAChB,wDAEAC,KAAKH,MAAMP,a,GAhBWY,aC0DbC,E,kDAnDb,aAAe,IAAD,8BACZ,gBAoBFC,eAAiB,SAACC,GAChB,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SApB1C,EAAKV,MAAQ,CACXd,OAAQ,GACRsB,YAAa,IAJH,E,kMAcWG,MAAM,iC,cAAvBC,E,gBACeA,EAASC,O,OAAxBC,E,OACNZ,KAAKC,SAAS,CAAEjB,OAAQ4B,EAAOC,U,qIASvB,IAAD,EACyBb,KAAKF,MAA7Bd,EADD,EACCA,OAAQsB,EADT,EACSA,YAEVQ,EAAiB9B,EAAO+B,QAAO,SAACC,GACpC,OAAOA,EAAMtC,KAAKuC,cAAcC,SAASZ,EAAYW,kBAIvD,OAAQjC,EAAOmC,OAGb,iCACE,2CAGA,kBAAC,EAAD,CAAW/C,aAAc4B,KAAKI,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUpB,OAAQ8B,OATxB,wBAAIlC,UAAU,WAAd,kB,GAnCYsB,aCIEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ba9e3aa6.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../containers/App.css';\r\n\r\n//use destructuring to grab prop searchChange\r\n//instead of props and props.searchChange\r\nconst SearchBar = ({searchChange}) => {\r\n    return (\r\n        <div>\r\n            <input \r\n            type=\"search\" \r\n            placeholder=\"search robots\" \r\n            onChange={searchChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBar;","import React from \"react\";\r\nimport \"../containers/App.css\";\r\n\r\n//use destructuring for variables\r\nconst Card = ({ mass, name, birth_year }) => {\r\n  return (\r\n    <div className=\"card\">\r\n      <img\r\n        src={`https://robohash.org/${mass}${birth_year}?set=set1`}\r\n        alt=\"robot headshot\"\r\n      />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>Birth year: {birth_year}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\nimport \"../containers/App.css\";\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div className=\"cardList\">\r\n      {robots.map((user, index) => {\r\n        return (\r\n          <Card\r\n            key={robots[index].mass+robots[index].birth_year}\r\n            mass={robots[index].mass}\r\n            name={robots[index].name}\r\n            birth_year={robots[index].birth_year}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst Scroll = ({ children }) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        overflowY: \"scroll\",\r\n        height: \"60vh\",\r\n        backgroundColor: \"#dedfe0\",\r\n        padding: \"2em 0\",\r\n      }}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { Component } from \"react\";\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false,\r\n    };\r\n  }\r\n\r\n  componentDidCatch() {\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    return this.state.hasError ? (\r\n      <h1>Oops. We've got problem!</h1>\r\n    ) : (\r\n      this.props.children\r\n    );\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, { Component } from \"react\";\r\nimport SearchBar from \"../components/SearchBar\";\r\nimport CardList from \"../components/CardList\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport ErrorBoundary from \"../components/ErrorBoundary\";\r\nimport \"./App.css\";\r\n\r\n//'smart components' have class syntax and states\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      robots: [],\r\n      searchfield: \"\",\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    //using async promise to fetch api\r\n    // fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    //   .then((response) => response.json())\r\n    //   .then((users) => this.setState({ robots: users }));\r\n\r\n    const response = await fetch(\"https://swapi.dev/api/people/\");\r\n    const people = await response.json();\r\n    this.setState({ robots: people.results });\r\n  }\r\n\r\n  //method for detecting change in search bar\r\n  //use arrow function to allow 'this' to refer to App, not input\r\n  onSearchChange = (event) => {\r\n    this.setState({ searchfield: event.target.value });\r\n  };\r\n\r\n  render() {\r\n    const { robots, searchfield } = this.state;\r\n    //have filterrobots in render so it can be returned\r\n    const filteredrobots = robots.filter((robot) => {\r\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n    });\r\n\r\n    //if still waiting for api file... display loading\r\n    return !robots.length ? (\r\n      <h1 className=\"loading\">Loading...</h1>\r\n    ) : (\r\n      <section>\r\n        <h1>Robofriends</h1>\r\n        {/* assign method 'onSearchChange' to prop 'searchChange' */}\r\n        {/* use 'this' because we are in an object/class */}\r\n        <SearchBar searchChange={this.onSearchChange} />\r\n        <Scroll>\r\n          <ErrorBoundary>\r\n            <CardList robots={filteredrobots} />\r\n          </ErrorBoundary>\r\n        </Scroll>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}